# TypeScript 编译器 TODO

## 1. 基础 JavaScript 语法（ECMAScript 标准）

- [x] **变量与作用域**
  - `var / let / const`
  - 作用域规则（全局、函数、块级作用域）
  - 暂时性死区（TDZ）

- [x] **基本类型**
  - `number / string / boolean / null / undefined`
  - `Symbol、bigint`

- [x] **运算符**
  - 算术运算符 (`+, -, *, /, %, **`)
  - 逻辑运算符 (`&&, ||, !`)
  - 位运算符 (`&, |, ^, ~, <<, >>, >>>`)
  - 比较运算符 (`==, ===, !=, !==, <, >, <=, >=`)
  - 赋值运算符 (`=, +=, -=, *=, /=, %=, **=`)
  - 条件运算符 (`?:`)
  - 可选链 (`?.`)

- [x] **控制流**
  - `if / else`
  - `switch`
  - `for / while / do-while`
  - `break / continue`
  - `try / catch / finally`
  - `throw`

- [x] **函数**
  - 普通函数 (`function f() {}`)
  - 箭头函数 (`const f = () => {}`)
  - 默认参数 (`function f(x = 1) {}`)
  - 剩余参数 (`function f(...args) {}`)
  - 函数返回值 (`return`)
  - 立即执行函数 (`(function() {})();`)

- [x] **对象与数组**
  - 对象字面量 (`{ key: value }`)
  - 可选属性 (`{ key?: string }`)
  - 数组 (`[1, 2, 3]`)
  - 解构赋值 (`const { a, b } = obj;`)
  - 展开运算符 (`const newObj = { ...oldObj }`)

- [x] **类与继承**
  - `class / constructor`
  - `extends / super`
  - `static / private / protected / public`
  - `get / set`

- [x] **模块化**
  - `import / export`
  - `export default`

- [x] **异步编程**
  - `Promise`
  - `async / await`
  - `setTimeout / setInterval`

- [x] **内置对象**
  - `Date / Math`
  - `RegExp`
  - `JSON`
  - `Map / Set`
  - `WeakMap / WeakSet`

## 2. TypeScript 扩展语法

- [x] **类型注解**
  - `let x: number = 10;`
  - `function add(a: number, b: number): number {}`
  - `const arr: string[] = ["a", "b", "c"];`

- [x] **类型推导**
  - 自动推导变量、函数返回值类型

- [x] **接口与类型别名**
  - `interface User { name: string; age: number; }`
  - `type User = { name: string; age: number; };`

- [x] **联合与交叉类型**
  - `string | number`
  - `{ a: number } & { b: string }`

- [x] **泛型**
  - `function identity<T>(arg: T): T {}`
  - `class Box<T> { constructor(private value: T) {} }`
  - `type Array<T> = T[];`

- [x] **可选与只读属性**
  - `? (interface User { name?: string; })`
  - `readonly (readonly name: string;)`

- [x] **枚举**
  - `enum Color { Red, Green, Blue }`
  - `const enum Size { Small, Medium, Large }`

- [x] **类型断言**
  - `const x = "hello" as string;`
  - `<string> "hello"`（仅在 JSX 之外）

- [x] **类型守卫**
  - `typeof (if (typeof x === "string"))`
  - `instanceof (if (obj instanceof Date))`
  - `in (if ("prop" in obj))`

- [x] **索引签名**
  - `[key: string]: number;`

- [x] **映射类型**
  - `type Readonly<T> = { readonly [P in keyof T]: T[P] };`

- [x] **条件类型**
  - `type IsString<T> = T extends string ? true : false;`

- [x] **命名空间（非推荐）**
  - `namespace MyNamespace { export const x = 10; }`

- [x] **装饰器（实验性）**
  - `@Component({ selector: 'app-root' })`

- [x] **类型兼容性**
  - 结构化类型系统

- [x] **关键字**
  - `keyof, infer, never, unknown`

## 3. 高级特性

- [x] **类型推断增强**
  - `ReturnType<T>`
  - `Parameters<T>`

- [x] **高级模式匹配**
  - 模式匹配类型

- [x] **优化 TypeScript to LLVM 结构**
  - 适合 LLVM 的内存管理
  - `this` 绑定优化
  - 类型擦除

- [x] **集成 C 绑定的方式**
  - `FFI` 设计
  - 类型转换机制

- [x] **类型系统扩展**
  - 可空性检查
  - `strict` 模式下的严格检查

- [x] **宏与代码生成**
  - `macro` 系统（类似 Rust）

